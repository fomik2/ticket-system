// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/fomik2/ticket-system/internal/entities"
	
	mock "github.com/stretchr/testify/mock"
)

// RepoInterface is an autogenerated mock type for the RepoInterface type
type RepoInterface struct {
	mock.Mock
	OnCRUDTicket func(ticket entities.Ticket)
	
}

// CreateTicket provides a mock function with given fields: _a0
func (_m *RepoInterface) CreateTicket(_a0 entities.Ticket) (entities.Ticket, error) {
	ret := _m.Called(_a0)

	var r0 entities.Ticket
	if rf, ok := ret.Get(0).(func(entities.Ticket) entities.Ticket); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Ticket)
	}
	
	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Ticket) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}
	

	return r0, r1
}

// CreateUser provides a mock function with given fields: _a0
func (_m *RepoInterface) CreateUser(_a0 entities.Users) (entities.Users, error) {
	ret := _m.Called(_a0)

	var r0 entities.Users
	if rf, ok := ret.Get(0).(func(entities.Users) entities.Users); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Users) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTicket provides a mock function with given fields: id
func (_m *RepoInterface) DeleteTicket(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *RepoInterface) DeleteUser(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: username
func (_m *RepoInterface) FindUser(username string) (entities.Users, error) {
	ret := _m.Called(username)

	var r0 entities.Users
	if rf, ok := ret.Get(0).(func(string) entities.Users); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entities.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicket provides a mock function with given fields: id
func (_m *RepoInterface) GetTicket(id int) (entities.Ticket, error) {
	ret := _m.Called(id)

	var r0 entities.Ticket
	if rf, ok := ret.Get(0).(func(int) entities.Ticket); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *RepoInterface) GetUser(id int) (entities.Users, error) {
	ret := _m.Called(id)

	var r0 entities.Users
	if rf, ok := ret.Get(0).(func(int) entities.Users); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTickets provides a mock function with given fields:
func (_m *RepoInterface) ListTickets() ([]entities.Ticket, error) {
	ret := _m.Called()

	var r0 []entities.Ticket
	if rf, ok := ret.Get(0).(func() []entities.Ticket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Ticket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTicketsByUser provides a mock function with given fields: email
func (_m *RepoInterface) ListTicketsByUser(email string) ([]entities.Ticket, error) {
	ret := _m.Called(email)

	var r0 []entities.Ticket
	if rf, ok := ret.Get(0).(func(string) []entities.Ticket); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Ticket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *RepoInterface) ListUsers() ([]entities.Users, error) {
	ret := _m.Called()

	var r0 []entities.Users
	if rf, ok := ret.Get(0).(func() []entities.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTicket provides a mock function with given fields: _a0
func (_m *RepoInterface) UpdateTicket(_a0 entities.Ticket) (entities.Ticket, error) {
	ret := _m.Called(_a0)

	var r0 entities.Ticket
	if rf, ok := ret.Get(0).(func(entities.Ticket) entities.Ticket); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Ticket)
	}
	
	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Ticket) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *RepoInterface) UpdateUser(_a0 entities.Users) (entities.Users, error) {
	ret := _m.Called(_a0)

	var r0 entities.Users
	if rf, ok := ret.Get(0).(func(entities.Users) entities.Users); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Users) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoInterface creates a new instance of RepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoInterface(t mockConstructorTestingTNewRepoInterface) *RepoInterface {
	mock := &RepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
